<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%@page import="com.liferay.portal.model.LayoutConstants"%>
<%@page import="com.liferay.portal.model.GroupConstants"%>
<%@page import="com.liferay.portal.service.GroupLocalServiceUtil"%>
<%@page import="com.liferay.portal.service.LayoutLocalServiceUtil"%>
<%@page import="com.liferay.portal.model.Layout"%>
<%@page import="java.util.List"%>
<%@page import="com.liferay.portal.kernel.util.StringPool"%>
<%@page import="java.util.Map"%>
<%@page import="javax.portlet.PortletPreferences"%>
<%@page import="com.liferay.portal.theme.ThemeDisplay"%>
<%@page import="com.liferay.portal.util.PortletKeys"%>
<%@page import="com.liferay.portal.service.PortletPreferencesLocalServiceUtil"%>
<%@page import="com.liferay.portal.model.Portlet"%>
<%@page import="com.liferay.portal.service.PortletLocalServiceUtil"%>
<%@page import="com.liferay.portlet.PortletPreferencesFactoryUtil"%>
<%
	String key;
	String keyWord = "";
	String KEY_WORD = "key_word";
	String jsResultMap = "{";
	String jsResultArray = "[";
	long plidCP = 0;
	long ownerId = PortletKeys.PREFS_OWNER_ID_DEFAULT;
	int ownerType = PortletKeys.PREFS_OWNER_TYPE_LAYOUT;
	long companyId = themeDisplay.getCompanyId();
	String portletId = "speech_WAR_speechportlet";

	try {
		Group groupTemp = GroupLocalServiceUtil.getGroup(companyId, GroupConstants.CONTROL_PANEL);
		List<Layout> layoutList = LayoutLocalServiceUtil.getLayouts(groupTemp.getGroupId(), true, LayoutConstants.TYPE_CONTROL_PANEL);
		if(layouts != null && !layoutList.isEmpty()) {
			plidCP = layoutList.get(0).getPlid(); 
		}
		PortletPreferences prefer = PortletPreferencesLocalServiceUtil.getPreferences(companyId, ownerId, ownerType, plidCP, portletId);
		if(prefer != null) {
			keyWord = prefer.getValue(KEY_WORD, StringPool.BLANK);
			
			for(Map.Entry<String, String[]> entry : prefer.getMap().entrySet()) {
				key = entry.getKey().trim();
				if (!key.isEmpty() && !key.equalsIgnoreCase(KEY_WORD)) {
					if(jsResultArray.equals("[")) {
						jsResultArray += "'" + key + "'";
					} else {
						jsResultArray += ",'" + key + "'";
					}
					if(jsResultMap.equals("{")) {
						jsResultMap += "'" + key + "':'" + entry.getValue()[0] + "'";
					} else {
						jsResultMap += ",'" + key + "':'" + entry.getValue()[0] + "'";
					}
				}
			}
		}
		jsResultMap += "}";
		jsResultArray += "]";
	} catch (SystemException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	} catch (PortalException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
%>

<aui:nav collapsible="<%= true %>" cssClass='<%= portalMessageUseAnimation ? "nav-account-controls" : "nav-account-controls nav-account-controls-notice" %>' icon="user" id="navAccountControls">
	<c:if test="<%= userSetupComplete %>">
		<%@ include file="/html/portlet/dockbar/view_page_customization_bar.jspf" %>

		<c:if test="<%= themeDisplay.isShowStagingIcon() %>">
			<aui:nav-item cssClass="staging-controls">
				<liferay-portlet:runtime portletName="<%= PortletKeys.STAGING_BAR %>" />
			</aui:nav-item>
		</c:if>
		<aui:nav-item cssClass="speech" dropdown="<%= false %>" id="speech" label="">
			<button id="start_button" onclick="startButton(event)">
				<img id="start_img" src="/speech-hook/image/mic.gif" alt="Start" width="43px">
			</button>
		</aui:nav-item>
		<%@ include file="/html/portlet/dockbar/view_admin_links.jspf" %>

		<%@ include file="/html/portlet/dockbar/view_my_sites.jspf" %>
	</c:if>

	<%@ include file="/html/portlet/dockbar/view_user_account.jspf" %>
</aui:nav>
<style>
  .aui button {
    background-image: linear-gradient(#118ade 0,#118ade 47%,#1273c7 100%);
    background-image: -webkit-gradient(linear,50% 0,50% 100%,color-stop(0%,#118ade),color-stop(47%,#118ade),color-stop(100%,#1273c7));
    border: 0px;
    color: #fff;
    padding: 0px;
  }
  .aui button :hover {
    background: #2aaae6!important;
  }
</style>
<script type="text/javascript">
var map = <%= jsResultMap %>;
var commands = <%= jsResultArray %>;
var keyWord = '<%= keyWord %>';
var userSetupComplete = <%= userSetupComplete %>;
//LOGS INIT PARAMS
//console.log(map);
//console.log(commands);
//console.log(keyWord);
var final_transcript = '';
var recognizing = false;
var ignore_onend;
var start_timestamp;
if(userSetupComplete) {
	if (!('webkitSpeechRecognition' in window)) {
	  upgrade();
	} else {
	  start_button.style.display = 'inline-block';
	  var recognition = new webkitSpeechRecognition();
	  recognition.continuous = true;
	  recognition.interimResults = false;
	
	  recognition.onstart = function() {
	    recognizing = true;
	    console.log('onstart /speech-hook/image/mic-animate.gif');
	    start_img.src = '/speech-hook/image/mic-animate.gif';
	  };
	
	  recognition.onerror = function(event) {
		  console.log('ERROR: ' + event.error);
		if (event.error == 'no-speech') {
	      console.log('onerror no-speech /speech-hook/image/mic.gif');
	      start_img.src = '/speech-hook/image/mic.gif';
	      ignore_onend = true;
	    }
	    if (event.error == 'audio-capture') {
	      console.log('onerror audio-capture /speech-hook/image/mic.gif');
	      start_img.src = '/speech-hook/image/mic.gif';
	      ignore_onend = true;
	    }
	    if (event.error == 'not-allowed') {
	      console.log('onerror not-allowed /speech-hook/image/mic.gif');
	      ignore_onend = true;
	    }
	    localStorage.setItem("speech-active", 0);
	  };
	
	  recognition.onend = function() {
	    recognizing = false;
	    if (ignore_onend) {
	      return;
	    }
	    console.log('onend /speech-hook/image/mic.gif');
	    start_img.src = '/speech-hook/image/mic.gif';
	    if (!final_transcript) {
	      return;
	    }
	    
	  };
	
	  recognition.onresult = function(event) {
	    var interim_transcript = '';
	    if (event.results[(event.results.length - 1)].isFinal) {
	      final_transcript = event.results[(event.results.length - 1)][0].transcript;
	    } else {
	      interim_transcript = event.results[(event.results.length - 1)][0].transcript;
	    }
	    
	    final_transcript = final_transcript.trim();
	    final_span.innerHTML = linebreak(final_transcript);
	    interim_span.innerHTML = linebreak(interim_transcript);
	    showToolTips(final_transcript);
	  };
	  
	  start();
	}
}
function upgrade() {
	  start_button.style.visibility = 'hidden';
}

var two_line = /\n\n/g;
var one_line = /\n/g;
function linebreak(s) {
  return s.replace(two_line, '<p></p>').replace(one_line, '<br>');
}

var first_char = /\S/;
function capitalize(s) {
  return s.replace(first_char, function(m) { return m.toUpperCase(); });
}

function startButton(event) {
	if (recognizing) {
		localStorage.setItem("speech-active", 0);
		recognition.stop();
	    return;
	}
	localStorage.setItem("speech-active", 1);
	final_transcript = '';
	recognition.lang = 'en-US';
	recognition.start();
	ignore_onend = false;
	final_span.innerHTML = '';
	interim_span.innerHTML = '';
	start_img.src = '/speech-hook/image/mic-slash.gif';

	start_timestamp = event.timeStamp;
}

function start() {
	var speech_active = false;
	var object = localStorage.getItem("speech-active");
	if(object != null) {
		speech_active = new Boolean(Number(object));
	}
	if(speech_active == true) {
		localStorage.setItem("speech-active", 1);
		recognition.lang = 'en-US';
		recognition.start();
		ignore_onend = false;
		start_img.src = '/speech-hook/image/mic-slash.gif';
	}
}

function showToolTips(speechCommand) {
	var index = 0;
	if(speechCommand.toLowerCase() ==  'show') {
		index = showTTDockBar(index);
	} else {
		var number;
		try {
			number = Number(speechCommand);
		} catch(error) {
			number = -1;
		}
		if(number > -1) {
			console.log("Is Number: " + speechCommand);
			clickDockBarItem(number);
		} else {
			var redirect = readCustomCommands(speechCommand);
			console.log("readCustomCommandResult: " + redirect);
			if(redirect != null && redirect.length > 0) {
				window.location.assign(redirect);
			}
		}
		console.log(speechCommand);
	}
	console.log(index);
}

//Show the index numbers of DockBar 
function showTTDockBar(index) {
	YUI().use('aui-tooltip', 'node', function(Y) {
		var dockBar = Y.one("ul[aria-label=Dockbar].nav-account-controls");
		if(Y.Lang.isObject(dockBar)) {
			var items = Y.all('li.dockbar-item');
			items.each(function(item, i){
				item.setAttribute('data-title', index);
				new Y.Tooltip({
			        trigger: item,
			        position: 'left',
			        zIndex: Liferay.zIndex.TOOLTIP,
			        opacity: 0.9,
			        visible: true
			    }).render();
				index++;
			});
		}
	});
	return index;
}

//Show the menu options on DockBar
function clickDockBarItem(index) {
	AUI().use('aui-tooltip', 'node', 'node-event-simulate', function(Y) {
		var dockBar = Y.one("ul[aria-label=Dockbar].nav-account-controls");
		if(Y.Lang.isObject(dockBar)) {
			var search = 'li[data-title='+ index +'].dropdown.dockbar-item';
			console.log(search);
			var item = dockBar.one(search);
			if(Y.Lang.isObject(item)) {
				dockBar.all('li.dropdown.dockbar-item').removeClass('open');
				item.addClass('open');
			} else {
				console.log("Not found item with " + index + " index.");
			}
		}
	});
}

//Read custom commands
function readCustomCommands(speechCommand) {
	var result = null;
	var keyWordLength = keyWord.length;
	var indexOf = speechCommand.indexOf(keyWord);
	
	if(indexOf > -1) {
		speechCommand = speechCommand.substring((keyWordLength + 1),speechCommand.length);
		speechCommand = speechCommand.trim();
	}
	for(var i = 0; i < commands.length; i++) {
		if(speechCommand == commands[i]) {
			result = map[speechCommand];
			break;
		}
	}
	return result;
}
</script>
<style>
.final {
    color: black;
    padding-right: 3px; 
  }
.interim {
  color: gray;
}
.results {
  font-size: 12px;
  font-weight: bold;
  border: 1px solid #ddd;
  padding: 0px;
  text-align: left;
  min-height: 10px;
  width: 362px;
  height: 20px;
  float: right;
  margin-top: 45px;
  margin-right: 70px;
}
.results2 {
  font-size: 12px;
  font-weight: bold;
  border: 1px solid #ddd;
  padding: 0px;
  text-align: left;
  min-height: 10px;
  width: 362px;
  height: 20px;
  float: right;
}
</style>